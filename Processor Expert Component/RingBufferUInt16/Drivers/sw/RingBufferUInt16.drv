%-Driver pre-generated by the Component Development Environment
%-      Copyright: 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved. 
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END 
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Development Environment will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  
%define DriverVersion 01.00
%define DriverDate    06/24/2013
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%define CDEversion Community 
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
  %-
%-
%INTERFACE
%define! Settings Common\RingBufferUInt16Settings.inc
%define! Abstract Common\RingBufferUInt16Abstract.inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited components */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ... 
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger; 
%-
%-BW_CUSTOM_USERTYPE_END

%-BW_DEFINITION_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN PutForce
%ifdef PutForce
uint8_t %'ModuleName'%.%PutForce(uint16_t elem);
%define! Parelem
%define!  RetVal
%include Common\RingBufferUInt16PutForce.inc
%endif  %-PutForce
%-BW_METHOD_END PutForce

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Get
%ifdef Get
uint8_t %'ModuleName'%.%Get(uint16_t *elemP);
%define! ParelemP
%define!  RetVal
%include Common\RingBufferUInt16Get.inc
%endif  %-Get
%-BW_METHOD_END Get

%-*****************************************************************************************************
%-BW_METHOD_BEGIN NofFreeElements
%ifdef NofFreeElements
uint16_t %'ModuleName'%.%NofFreeElements();
%define!  RetVal
%include Common\RingBufferUInt16NofFreeElements.inc
%endif  %-NofFreeElements
%-BW_METHOD_END NofFreeElements

%-*****************************************************************************************************
%-BW_METHOD_BEGIN NofElements
%ifdef NofElements
uint16_t %'ModuleName'%.%NofElements();
%define!  RetVal
%include Common\RingBufferUInt16NofElements.inc
%endif  %-NofElements
%-BW_METHOD_END NofElements

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init();
%include Common\RingBufferUInt16Init.inc
%endif  %-Init
%-BW_METHOD_END Init

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Put
%ifdef Put
uint8_t %'ModuleName'%.%Put(uint16_t elem);
%define! Parelem
%define!  RetVal
%include Common\RingBufferUInt16Put.inc
%endif  %-Put
%-BW_METHOD_END Put

%-************************************************************************************************************
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif 
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-*****************************************************************************************************

%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnBufferEmpty
%ifdef OnBufferEmpty
%INTERFACE OnBufferEmpty
void %OnBufferEmpty();
%include Common\RingBufferUInt16OnBufferEmpty.inc
%endif %-OnBufferEmpty
%-BW_METHOD_END OnBufferEmpty
%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnBufferFull
%ifdef OnBufferFull
%INTERFACE OnBufferFull
void %OnBufferFull();
%include Common\RingBufferUInt16OnBufferFull.inc
%endif %-OnBufferFull
%-BW_METHOD_END OnBufferFull
%-*****************************************************************************************************

%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\RingBufferUInt16Settings.inc
%define! Abstract Common\RingBufferUInt16Abstract.inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here 
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
static %DataWidth buffer[%BufferSize]; /* ring buffer */
%if %BufferSize <= '255'
static uint8_t inIdx;  /* input index */
static uint8_t outIdx; /* output index */
static uint8_t inSize; /* size of input data */
%else
static uint16_t inIdx;  /* input index */
static uint16_t outIdx; /* output index */
static uint16_t inSize; /* size of input data */
%endif
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN PutForce
%ifdef PutForce
%define! Parelem
%define! RetVal
%include Common\RingBufferUInt16PutForce.inc
uint8_t %'ModuleName'%.%PutForce(%DataWidth elem)
{
%CODE_BEGIN
  uint8_t res = ERR_OK;

  EnterCritical();
  if (inSize==%BufferSize)
  {
    res = ERR_TXFULL;
	buffer[inIdx] = elem;
    if (++inIdx==%BufferSize)
    {
      inIdx = 0;
    }    
    if (++outIdx==%BufferSize)
    {
      outIdx = 0;
    }
  }
  else
  {
    buffer[inIdx] = elem;
    inSize++;
    if (++inIdx==%BufferSize)
    {
      inIdx = 0;
    }
  }
  ExitCritical();

  %ifdef OnBufferFull
  if (res==ERR_TXFULL)
  {
    %OnBufferFull(); /* call user event */
  }
  %endif
  return res;
%CODE_END
}
%endif %-PutForce
%-BW_METHOD_END PutForce

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Get
%ifdef Get
%define! ParelemP
%define! RetVal
%include Common\RingBufferUInt16Get.inc
uint8_t %'ModuleName'%.%Get(%DataWidth *elemP)
{
%CODE_BEGIN
  uint8_t res = ERR_OK;

  EnterCritical();
  if (inSize==0)
  {
    res = ERR_RXEMPTY;
  }
  else
  {
    *elemP = buffer[outIdx];
    inSize--;
    if (++outIdx==%BufferSize)
    {
      outIdx = 0;
    }
  }
  ExitCritical();

  %ifdef OnBufferEmpty
  if (res==ERR_RXEMPTY)
  {
    %OnBufferEmpty(); /* call user event */
  }
  %endif  
  return res;
%CODE_END
}
%endif %-Get
%-BW_METHOD_END Get

%-*****************************************************************************************************
%-BW_METHOD_BEGIN NofFreeElements
%ifdef NofFreeElements
%define! RetVal
%include Common\RingBufferUInt16NofFreeElements.inc
uint16_t %'ModuleName'%.%NofFreeElements()
{
%CODE_BEGIN
  return (%BufferSize - inSize);
%CODE_END
}
%endif %-NofFreeElements
%-BW_METHOD_END NofFreeElements

%-*****************************************************************************************************
%-BW_METHOD_BEGIN NofElements
%ifdef NofElements
%define! RetVal
%include Common\RingBufferUInt16NofElements.inc
uint16_t %'ModuleName'%.%NofElements()
{
%CODE_BEGIN
  return inSize;
%CODE_END
}
%endif %-NofElements
%-BW_METHOD_END NofElements

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\RingBufferUInt16Init.inc
void %'ModuleName'%.%Init()
{
%CODE_BEGIN
  inIdx = 0;
  outIdx = 0;
  inSize = 0;
%CODE_END
}
%endif %-Init
%-BW_METHOD_END Init

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Put
%ifdef Put
%define! Parelem
%define! RetVal
%include Common\RingBufferUInt16Put.inc
uint8_t %'ModuleName'%.%Put(%DataWidth elem)
{
%CODE_BEGIN
  uint8_t res = ERR_OK;

  EnterCritical();
  if (inSize==%BufferSize)
  {
    res = ERR_TXFULL;
  }
  else
  {
    buffer[inIdx] = elem;
    inSize++;
    if (++inIdx==%BufferSize)
    {
      inIdx = 0;
    }
  }
  ExitCritical();

  %ifdef OnBufferFull
  if (res==ERR_TXFULL)
  {
    %OnBufferFull(); /* call user event */
  }
  %endif
  return res;
%CODE_END
}
%endif %-Put
%-BW_METHOD_END Put

%-************************************************************************************************************
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-*****************************************************************************************************


%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnBufferEmpty
%ifdef OnBufferEmpty
%IMPLEMENTATION OnBufferEmpty
%include Common\RingBufferUInt16OnBufferEmpty.inc
void %OnBufferEmpty()
{
%CODE_BEGIN
/******Write your code here*******/
%CODE_END
}
%endif %-OnBufferEmpty
%-BW_METHOD_END OnBufferEmpty

%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnBufferFull
%ifdef OnBufferFull
%IMPLEMENTATION OnBufferFull
%include Common\RingBufferUInt16OnBufferFull.inc
void %OnBufferFull()
{
%CODE_BEGIN
/******Write your code here*******/
%CODE_END
}
%endif %-OnBufferFull
%-BW_METHOD_END OnBufferFull

%-*****************************************************************************************************


%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  /* Write code here ... */
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
